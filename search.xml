<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>函数及数组(js)</title>
      <link href="/2023/09/25/javascript%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/25/javascript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-函数"><a href="#1-函数" class="headerlink" title="1 函数"></a>1 函数</h1><p>（1）函数本质是通过 Function类 new 出来的对象</p><h1 id="2-array对象"><a href="#2-array对象" class="headerlink" title="2 array对象"></a>2 array对象</h1><h4 id="数组元素的增加"><a href="#数组元素的增加" class="headerlink" title="数组元素的增加"></a>数组元素的增加</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组元素的增加:push方法</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> len = arr.<span class="title function_">push</span>(<span class="number">6</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//输出结果:[1,2,3,4,5,6]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len)<span class="comment">//输出结果:6，len的输出结果是元素不是数组！！！</span></span><br></pre></td></tr></table></figure><h4 id="数组元素的删除"><a href="#数组元素的删除" class="headerlink" title="数组元素的删除"></a>数组元素的删除</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组元素的删除</span></span><br><span class="line"><span class="comment">//pop方法：</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">obj = arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//注意方法的返回值为从数组末尾移除的元素，数组长度已经改变</span></span><br><span class="line"><span class="comment">//delete方法</span></span><br><span class="line"><span class="keyword">delete</span> arr[index]</span><br><span class="line"><span class="comment">//数组长度未改变，数组指定位置的元素变为undefined</span></span><br></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><p>遍历数组,找出数组元素中索引只有一个的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历数组,找出数组元素中索引只有一个的元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> res =  arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) == index   <span class="comment">//数组元素第一次出现的索引 等于 遍历时候的索引</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">//即第一个20：indexof(item)=1==1,但是第二个20：indexof(item)=1！==2，所以过滤掉了第二个20</span></span><br><span class="line"><span class="comment">//打印过滤后的数组[10,20,30]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><p>​定义新的数组,拿到原数组的每一个元素,在放入新数组之前做一个判断(如果新数组中没有这个元素就可以放进去)</p><p>​        怎么判断新数组中没有这个元素  调用indexOf方法,值是-1就表示不存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>]</span><br><span class="line"><span class="comment">//新数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = []</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(newArr.<span class="title function_">indexOf</span>(item) == -<span class="number">1</span>)&#123;</span><br><span class="line">                newArr.<span class="title function_">push</span>(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">//打印新数组[10,20,30]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通道数理解</title>
      <link href="/2023/09/19/%E9%80%9A%E9%81%93%E6%95%B0%E7%90%86%E8%A7%A3/"/>
      <url>/2023/09/19/%E9%80%9A%E9%81%93%E6%95%B0%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-通道数"><a href="#1-通道数" class="headerlink" title="1 通道数"></a>1 通道数</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p>可以理解为图像的深度，例如我们常用的RGB图像，它就包含3个通道(R,G,B三个通道合成得到图像)，而灰度图像就只有1个通道。</p><h2 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h2><p><img src="https://img-blog.csdnimg.cn/20210516163436937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FsaXR0bGViYWkx,size_16,color_FFFFFF,t_70" alt="通道" title="通道"></p><h2 id="1-2-输入通道数等于卷积核通道个数"><a href="#1-2-输入通道数等于卷积核通道个数" class="headerlink" title="1.2 输入通道数等于卷积核通道个数"></a>1.2 输入通道数等于卷积核通道个数</h2><p>​例如当我们输入的图片为三通道时，那么卷积核也会有三个通道，就像上述图片，最左边的三个矩阵是一个图片的三个通道（因为计算机上是以数字矩阵存储），与这张图片相乘的是一个1*1的三通道卷积核（褐色、橘色、紫色的矩阵分别构成3通道）</p><p>​为了让图像的三个通道和卷积核分别进行点积并相加得到一个矩阵，即一个特征图，所以卷积核的通道也要有3个，为了和图像的每个通道都进行运算。</p><h2 id="1-3-卷积核个数等于输出通道个数"><a href="#1-3-卷积核个数等于输出通道个数" class="headerlink" title="1.3 卷积核个数等于输出通道个数"></a>1.3 卷积核个数等于输出通道个数</h2><p>​卷积核的数量决定输出的通道数，比如说现在有一张像素为16 * 16的三通道图片（16 * 16 * 3），其实这张照片就由三个16 * 16的矩阵组成，如果这时我们有256个3 * 3 * 3的卷积核，其实就是每个卷积核由3个3 * 3的矩阵，有256个这样的卷积核。那么这张16 * 16 * 3的图片要和256个 3 * 3 * 3 的卷积核都进行点积并相加得出特征图，即得到的特征图有256个，即卷积核的个数，也是输出通道的个数。</p><h2 id="1-4-为什么要增加通道"><a href="#1-4-为什么要增加通道" class="headerlink" title="1.4 为什么要增加通道"></a>1.4 为什么要增加通道</h2><p>​在一张照片中可能有很多信息，比如人，动物….，我们人眼可以一下子就分辨出来，但是计算机不可以，他要进行特征提取，也是卷积的第一个操作。</p><p>​我们增加通道数就代表着增加特征，而造成通道数增加的操作其实就是卷积核的增加，不同的卷积核可以提取到不同特征。</p><p>​因为不同的卷积核可以分辨出不同的特征，所以增加卷积核的个数很必要，计算机通过利用这些特征图，来最终得到结论，分辨出图像的事物到底是什么。</p><p>[通道]: <a href="https://blog.csdn.net/qq_54641516/article/details/127079382">https://blog.csdn.net/qq_54641516/article/details/127079382</a>“原文出处”</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flex和浮动对比</title>
      <link href="/2023/09/12/flex%E5%92%8C%E6%B5%AE%E5%8A%A8/"/>
      <url>/2023/09/12/flex%E5%92%8C%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-主要用途"><a href="#1-主要用途" class="headerlink" title="1 主要用途"></a>1 主要用途</h2><h3 id="1-1-浮动布局"><a href="#1-1-浮动布局" class="headerlink" title="1.1 浮动布局"></a>1.1 浮动布局</h3><ol><li>创建多列布局：通过将元素浮动到左或右，可以实现多列布局</li><li>实现文本环绕效果：使文本围绕在浮动元素周围，如图片</li></ol><h3 id="1-2-flex布局"><a href="#1-2-flex布局" class="headerlink" title="1.2 flex布局"></a>1.2 flex布局</h3><ol><li>简化布局：Flex布局使得创建水平和垂直方向上的布局都变得非常容易，而不需要使用复杂的浮动或定位。</li><li>响应式设计：Flex布局非常适合响应式设计，可以轻松调整布局以适应不同的屏幕尺寸和设备。</li><li>等高列布局：Flexbox允许您创建等高列，即使它们的内容高度不同。</li><li>分布空间：Flex容器可以智能地分配空间，以使其中的项目在不同屏幕尺寸下保持适当的布局。</li></ol><h2 id="2-浮动布局的弊端"><a href="#2-浮动布局的弊端" class="headerlink" title="2 浮动布局的弊端"></a>2 浮动布局的弊端</h2><p>子元素都浮动之后，会脱离文档流，导致父元素没有高度(<strong>理解：看不到父类元素的背景</strong>)，从而对后面的布局产生影响</p><h2 id="3-示例代码"><a href="#3-示例代码" class="headerlink" title="3 示例代码"></a>3 示例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* father不设置高度将由子元素撑开 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>image-label生成</title>
      <link href="/2023/09/11/image-label%E7%94%9F%E6%88%90/"/>
      <url>/2023/09/11/image-label%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>目的是为每个蜜蜂图像创建一个相应的标签文件</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">root_dir = <span class="string">&#x27;E:\pythonProject\hymenoptera_data/train&#x27;</span></span><br><span class="line">target_dir = <span class="string">&#x27;bees_image&#x27;</span></span><br><span class="line"><span class="comment"># 涉及到listdir时用绝对路径</span></span><br><span class="line">img_path = os.listdir(os.path.join(root_dir, target_dir))</span><br><span class="line">label = target_dir.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">out_dir = <span class="string">&#x27;bees_label&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> img_path:</span><br><span class="line">    file_name = i.split(<span class="string">&#x27;.jpg&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(root_dir, out_dir,<span class="string">&quot;&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(file_name)),<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(label)</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.listdir()使用时根目录需要用绝对路径</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>open-cv显示图像</title>
      <link href="/2023/09/11/opencv/"/>
      <url>/2023/09/11/opencv/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么cv2-imshow之后要跟cv2-waitkey"><a href="#为什么cv2-imshow之后要跟cv2-waitkey" class="headerlink" title="为什么cv2.imshow之后要跟cv2.waitkey"></a>为什么cv2.imshow之后要跟cv2.waitkey</h2><p>waitkey控制着imshow的持续时间，当imshow之后不跟waitkey时，相当于没有给imshow提供时间展示图像，所以只有一个空窗口一闪而过。添加了waitkey后，哪怕仅仅是cv2.waitkey(1),我们也能截取到一帧的图像,所以cv2.imshow后边是必须要跟cv2.waitkey</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cv.imshow(<span class="string">&#x27;image&#x27;</span>,img)</span><br><span class="line">&lt;!-- 第一个参数为图片显示框的标题，第二个参数为要显示的图片变量 --&gt;</span><br><span class="line">cv.waitKey(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>conda</title>
      <link href="/2023/09/07/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/09/07/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="查看conda的环境信息"><a href="#查看conda的环境信息" class="headerlink" title="查看conda的环境信息"></a>查看conda的环境信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>消融实验</title>
      <link href="/2023/09/04/%E6%B6%88%E8%9E%8D%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/09/04/%E6%B6%88%E8%9E%8D%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-消融实验-简介"><a href="#1-消融实验-简介" class="headerlink" title="1 消融实验 简介"></a>1 消融实验 简介</h2><ul><li>定义</li><li>目的</li><li>举例</li><li>意义</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>“消融实验”（ablation experiment）是一种常用的实验方法，用于评估深度神经网络中不同组件或部分的贡献，以了解它们对模型性能的影响。这种实验方法通常通过逐步移除或禁用神经网络的某些部分来进行，然后观察模型性能的变化。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>是帮助研究人员理解神经网络模型的工作方式，识别哪些部分对模型性能起到关键作用，以及哪些部分可能不是必需的或可以改进。通过这种方式，研究人员可以更好地优化和改进深度学习模型，提高其性能和效率。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>假设你有一个用于图像分类的卷积神经网络（CNN），你可以进行消融实验来逐步去除其中的某些卷积层或池化层，然后测试模型在分类任务上的性能。通过比较不同实验条件下的性能，你可以确定哪些层对于任务的成功至关重要，哪些可以被简化或去除，从而减少模型的复杂性</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>消融实验在深度学习中是一种有用的工具，有助于深入了解神经网络的工作原理，指导模型设计和改进，以及更好地理解模型的内部机制。它有助于研究人员更有效地构建和优化深度学习模型</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2023/08/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2023/08/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/21/hello-world/"/>
      <url>/2023/08/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
