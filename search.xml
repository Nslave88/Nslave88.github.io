<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>服务器端项目流程</title>
      <link href="/2023/12/04/json%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/12/04/json%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建项目文件夹"><a href="#1-创建项目文件夹" class="headerlink" title="1 创建项目文件夹"></a>1 创建项目文件夹</h1><h1 id="2-初始化项目"><a href="#2-初始化项目" class="headerlink" title="2 初始化项目"></a>2 初始化项目</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><p>初始化得到<code>package.json</code>文件，<code>package.json</code>相当于这个包的描述文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;code-test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span><span class="string">&quot;json-server -v&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="3-安装开发依赖"><a href="#3-安装开发依赖" class="headerlink" title="3 安装开发依赖"></a>3 安装开发依赖</h1><p>自己的电脑中已经安装了<code>json-server</code>,但是写好的项目给客户时，有可能客户并没有安装<code>json-server</code>,所以安装跟随项目的<strong>开发依赖</strong>可以使客户在运行项目前，直接<code>pnpm</code>所有的开发依赖</p><p>安装<code>json-server</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm i json-server -D</span><br><span class="line"><span class="comment">// -D表示在此项目文件夹内安装开发式依赖</span></span><br></pre></td></tr></table></figure><p>在<code>json</code>文件中会出现开发依赖的信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;json-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.17.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="4-编写启动脚本dev"><a href="#4-编写启动脚本dev" class="headerlink" title="4 编写启动脚本dev"></a>4 编写启动脚本<code>dev</code></h1><p><strong>! ! !重点</strong></p><p>在一个<code>package.json</code>文件中，重点要关注3个点</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span><span class="string">&quot;json-server -w ./database/data.json&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;json-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.17.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>main</code>是项目入口文件</p><p><code>scripts</code>：自定义脚本</p><p><code>devDependencies</code>:开发依赖</p><p>比如：</p><p>这里启动依赖的<code>json-server</code>，正常的终端启动代码是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx json-server -w ./database/data.<span class="property">json</span></span><br></pre></td></tr></table></figure><p>自定义<code>dev</code>后，此时启动<code>json-server</code>变为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm dev</span><br></pre></td></tr></table></figure><h1 id="5-创建并编写data-json数据文件"><a href="#5-创建并编写data-json数据文件" class="headerlink" title="5 创建并编写data.json数据文件"></a>5 创建并编写<code>data.json</code>数据文件</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;xiaoming&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">20</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;xiaomei&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;xiaoli&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="6-启动服务"><a href="#6-启动服务" class="headerlink" title="6 启动服务"></a>6 启动服务</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm dev</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="/2023/12/04/json%E9%A1%B9%E7%9B%AE/%E6%9C%8D%E5%8A%A1%E5%99%A8.JPG"></p><p><code>code-test</code>这个文件夹相当于一个包，每个包只有<strong>一个</strong><code>package.json</code>，<code>package.json</code>相当于这个包的描述文件</p><p>在<code>node_modules</code>中还有一个<code>package.json</code>文件,这个<code>package.json</code>是<code>json-server</code>的描述文件</p><p><img src="/2023/12/04/json%E9%A1%B9%E7%9B%AE/json-server.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 接口编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离跨域请求</title>
      <link href="/2023/12/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/2023/12/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="问题1：跨域是什么？"><a href="#问题1：跨域是什么？" class="headerlink" title="问题1：跨域是什么？"></a>问题1：跨域是什么？</h1><h2 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1 同源策略"></a>1 同源策略</h2><p>跨域问题其实就是浏览器的<strong>同源策略</strong>所导致的</p><p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个<code>origin(源)</code>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p><p><code>origin(源)</code>由用于访问它的URL的方案(协议)、主机名(域名)和端口定义。</p><h2 id="2-什么算是同源"><a href="#2-什么算是同源" class="headerlink" title="2 什么算是同源"></a>2 什么算是同源</h2><p>先来看看<code>url</code>的组成部分</p><p><img src="/2023/12/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/URL%E7%BB%84%E6%88%90.png"></p><p>只有当</p><h2 id="protocol-协议-、domain-域名-、port-端口-三者一致"><a href="#protocol-协议-、domain-域名-、port-端口-三者一致" class="headerlink" title="protocol(协议)、domain(域名)、port(端口) 三者一致"></a>protocol(协议)、domain(域名)、port(端口) 三者一致</h2><p><strong>才是同源</strong></p><p>例如：</p><p>以下协议、域名、端口<strong>一致</strong></p><p><code>http://www.example.com:80/a.js</code>&#x3D;&#x3D;&#x3D;<code>http://www.example.com/a.js</code></p><p><code>http</code>可以省略端口80，<code>https</code>省略443</p><p><code>http://www.example.com:80/b.js</code></p><p><code>http</code>为协议，<code>www.example.com</code>为域名，<code>:80</code>为端口</p><h1 id="问题2：如何解决跨域？"><a href="#问题2：如何解决跨域？" class="headerlink" title="问题2：如何解决跨域？"></a>问题2：如何解决跨域？</h1><h2 id="1-CORS"><a href="#1-CORS" class="headerlink" title="1 CORS"></a>1 <code>CORS</code></h2><p>跨域资源共享（<code>CORS</code>）是一种机制，它使用<strong>额外</strong>的<code>HTTP</code>头来告诉浏览器让运行在一个<code>origin</code>上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器<strong>不同的域、协议或端口</strong>请求一个资源时，资源会发起一个<strong>跨域HTTP请求</strong></p><p><code>CORS</code>机制允许Web应用服务器进行跨源访问控制，从而使跨源数据传输得以安全进行。现代浏览器支持在<code>API</code>容器中使用<code>CORS</code>以降低跨源HTTP请求所带来的风险</p><h3 id="1-1-跨源HTTP请求例子"><a href="#1-1-跨源HTTP请求例子" class="headerlink" title="1.1 跨源HTTP请求例子"></a>1.1 跨源HTTP请求例子</h3><p>跨源HTTP请求的一个例子：运行在<code>https://domain-a.com</code>的JavaScript代码使用<code>XMLHttpRequest</code>来发起一个到<code>https://domain-b.com/data.json</code>的请求</p><h4 id="XMLHttpRequest（XHR）"><a href="#XMLHttpRequest（XHR）" class="headerlink" title="XMLHttpRequest（XHR）"></a><code>XMLHttpRequest（XHR）</code></h4><p><strong><code>XMLHttpRequest（XHR）</code><strong>对象用于与服务器交互。通过<code>XMLHttpRequest</code>可以在不刷新页面的情况下请求特定URL,获取数据。这允许网页在</strong>不影响</strong>用户操作的情况下，<strong>更新</strong>页面的<strong>局部</strong>内容。<code>XMLHttpRequest（XHR）</code>在<code>AJAX</code>编程中被大量使用</p><h2 id="什么情况下需要CORS"><a href="#什么情况下需要CORS" class="headerlink" title="什么情况下需要CORS?"></a>什么情况下需要<code>CORS</code>?</h2><p>这份<a href="https://fetch.spec.whatwg.org/#http-cors-protocol">跨源共享标准</a>允许在下列场景中使用跨站点 HTTP 请求：</p><ul><li>前文提到的由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API"><code>Fetch API</code></a> 发起的跨源 HTTP 请求。</li><li>Web 字体（<code>CSS</code> 中通过 <code>@font-face</code> 使用跨源字体资源），<a href="https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements">因此，网站就可以发布 <code>TrueType</code> 字体资源，并只允许已授权网站进行跨站调用</a>。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL"><code>WebGL</code> 贴图</a>。</li><li>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage"><code>drawImage()</code></a> 将图片或视频画面绘制到 canvas。</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_shapes/Shapes_from_images">来自图像的 <code>CSS</code> 图形 (en-US)</a>。</li></ul><h2 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h2><p>跨源资源共享标准新增了一组 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">HTTP 标头</a>字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生<strong>副作用</strong>的 HTTP 请求方法（特别是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET"><code>GET</code></a> 以外的 HTTP 请求，或者搭配某些 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME 类型</a>的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 请求），浏览器必须首先使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS"><code>OPTIONS</code></a> 方法发起一个<strong>预检请求（preflight request）</strong>，从而获知服务端是否<strong>允许</strong>该跨源请求。服务器<strong>确认允许</strong>之后，才发起<strong>实际</strong>的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">Cookie</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication">HTTP 认证</a>相关数据）。</p><p>而在<code>CORS</code>中会有<strong>简单请求</strong>和<strong>复杂请求</strong>的概念</p><h1 id="细节！-细节！-细节！"><a href="#细节！-细节！-细节！" class="headerlink" title="细节！ 细节！ 细节！"></a>细节！ 细节！ 细节！</h1><p>双击<code>Html</code>文件时，是以file协议打开的文件，而在<code>vscode</code>中利用<code>live server</code>打开是**<code>http</code>**协议</p><p>如果用双击打开的话，<code>file</code>协议和<code>html</code>协议就产生了跨域，而<code>ajax,axios,fetch</code>都是基于<code>http</code>协议的，所以就算<code>axios</code>和<code>fetch</code>模块导入正确，但是用<code>file</code>协议打开的，就会报错：</p><p><img src="/2023/12/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/%E6%8A%A5%E9%94%99.JPG"></p><h3 id="http协议的域名：live-server"><a href="#http协议的域名：live-server" class="headerlink" title="http协议的域名：live server"></a><code>http</code>协议的域名：<code>live server</code></h3><p><img src="/2023/12/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/live%20server.JPG"></p><h3 id="file协议的域名："><a href="#file协议的域名：" class="headerlink" title="file协议的域名："></a><code>file</code>协议的域名：</h3><p><img src="/2023/12/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/file.JPG"></p><h2 id="综上所述："><a href="#综上所述：" class="headerlink" title="综上所述："></a>综上所述：</h2><p>利用<code>axios</code>实现接口调用时,需要使用<code>live server</code>打开，即<code>axios</code><strong>支持</strong><code>http</code>协议，<strong>并且</strong><code>CORS</code><strong>不支持</strong><code>file</code>协议</p>]]></content>
      
      
      <categories>
          
          <category> 接口编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超参数调优</title>
      <link href="/2023/11/27/%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/"/>
      <url>/2023/11/27/%E8%B6%85%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h1><p>​在深度学习中，<strong>超参数（<code>Hyperparameters</code>）</strong>是指那些不由模型自身学习得到的参数，需要在训练之前设定，并且通常对模型的性能产生显著影响。</p><p>​与之相对的是<strong>模型参数（<code>Model Parameters</code>）</strong></p><p>​<strong>模型参数（<code>Model Parameters</code>）</strong>:这些是模型在训练过程中学习得到的参数，它们用于表示模型的权重和偏差。</p><h1 id="2-常见的深度学习超参数包括"><a href="#2-常见的深度学习超参数包括" class="headerlink" title="2 常见的深度学习超参数包括"></a>2 常见的深度学习超参数包括</h1><ol><li><strong>学习率（Learning Rate）：</strong> 控制参数更新的步长。过大的学习率可能导致模型无法收敛，而过小的学习率可能导致训练过程非常缓慢或者停滞。</li><li><strong>批大小（Batch Size）：</strong> 每次迭代中用于更新模型参数的样本数。较大的批大小可能提高训练速度，但也可能增加内存需求。较小的批大小可能导致模型参数更新的不稳定性。</li><li><strong>迭代次数（Epochs）：</strong> 定义整个数据集在训练过程中的完整迭代次数。迭代次数太少可能导致模型未能充分学习，而迭代次数太多可能导致过拟合。</li><li><strong>神经网络的层数和每层的神经元数：</strong> 这些是神经网络架构的超参数。不同的架构可能适用于不同的问题，而调整层数和神经元数可以影响模型的容量和复杂性。</li><li><strong>正则化参数（Regularization Parameters）：</strong> 正则化用于控制模型的复杂性，以防止过拟合。<code>L1</code>正则化和<code>L2</code>正则化是两种常见的正则化技术，它们涉及到一个权重的惩罚项。</li></ol><h1 id="3-超参数调优的方法"><a href="#3-超参数调优的方法" class="headerlink" title="3 超参数调优的方法"></a>3 超参数调优的方法</h1><p>​超参数的选择通常需要在模型训练<strong>之前</strong>进行调优。在模型训练的过程中，这些<strong>超参数是固定</strong>的，而模型参数则通过学习过程进行调整。<strong>超参数调优</strong>是一个重要的任务，因为不同的超参数<strong>组合</strong>可能导致模型性能的显著<strong>差异</strong>。调优的<strong>方法</strong>包括手动调整、网格搜索、随机搜索和更高级的优化算法，如贝叶斯优化。</p><h1 id="4-为什么要进行超参数调优"><a href="#4-为什么要进行超参数调优" class="headerlink" title="4 为什么要进行超参数调优"></a>4 为什么要进行超参数调优</h1><ol><li><strong>影响模型性能：</strong> 超参数的选择直接关系到模型的性能。通过调整超参数，可以找到最优的组合，从而提高模型的准确性和泛化能力。</li><li><strong>防止过拟合：</strong> 适当的正则化参数可以帮助防止模型对训练数据过度拟合，提高模型在未见过的数据上的泛化能力。</li><li><strong>加速训练过程：</strong> 合适的学习率和批大小选择可以加速模型的训练过程，提高训练效率。</li><li><strong>适应不同问题：</strong> 不同的问题可能需要不同的超参数设置。通过调优超参数，可以使模型更好地适应特定的任务。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node导入导出---- module.exports和exports的区别</title>
      <link href="/2023/11/21/node%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA--exports/"/>
      <url>/2023/11/21/node%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA--exports/</url>
      
        <content type="html"><![CDATA[<h1 id="回答面试题的思路："><a href="#回答面试题的思路：" class="headerlink" title="回答面试题的思路："></a>回答面试题的思路：</h1><ol><li>先回答node导入导出是什么</li><li>再回答node导入导出怎么用！！！</li><li>常见问题及使用场景</li></ol><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>node导入导出是模块化利用其他node中变量或函数的过程</p><h3 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h3><p>   1.导出是通过exports对象实现，这一过程给exports的属性及方法赋予变量及函数</p><ol start="2"><li>导入通过require函数，再通过文件名.属性或方法来调用对应的内容</li></ol><h3 id="导入过程："><a href="#导入过程：" class="headerlink" title="导入过程："></a>导入过程：</h3><ol><li>require导入后优先执行导入文件的代码</li><li>然后接收到导出的对象作为返回值将其保存下来</li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>   1.比如多个导入文件中的变量同名，这时候使用exports来导出可以避免这些变量被导入时的冲突</p><h1 id="module-exports和exports的区别和联系"><a href="#module-exports和exports的区别和联系" class="headerlink" title="module.exports和exports的区别和联系"></a><code>module.exports</code>和<code>exports</code>的区别和联系</h1><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p><code>module.exports</code>和exports都属于<code>common JS</code>规范，在node中，如果<code>exports</code>没有单独新建对象，则<code>exports</code>和<code>module.exports</code>指向同一个内存地址</p><p>模块导出的是 <code>module.exports</code> , <code>exports</code> 只是对它的引用,在不改变<code>exports</code> 内存的情况下,修改<code>exports</code> 的值可以改变 <code>module.exports</code> 的值</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>node中模块的导出只依据<code>module.exports</code>而不管exports</p><h1 id="在ESM下"><a href="#在ESM下" class="headerlink" title="在ESM下"></a>在<code>ESM</code>下</h1><p>导入时<strong>不写</strong>括号{}，导入的<code>export default</code>的内容</p><p>导入时<strong>写</strong>括号{}，导入的<code>export</code>的成员</p><h1 id="在Node（CommonJS）下"><a href="#在Node（CommonJS）下" class="headerlink" title="在Node（CommonJS）下"></a>在<code>Node（CommonJS）</code>下</h1><p>导入时<strong>不写</strong>括号，导入整个对象</p><p>导入时<strong>写</strong>括号，对导入对象的解构赋值的语法</p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入calc模块</span></span><br><span class="line"><span class="comment">// const calc = require(&#x27;./calc.js&#x27;) // 是一个对象s</span></span><br><span class="line"><span class="comment">//如果不用解构赋值,调用add方法如下</span></span><br><span class="line"><span class="keyword">const</span> res1 = calc.<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//每次都需要引用calc-------使用麻烦</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; add &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./calc.js&#x27;</span>) <span class="comment">// 解构赋值,add是calc模块中的一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>值和引用</title>
      <link href="/2023/11/16/%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8/"/>
      <url>/2023/11/16/%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="值类型变量"><a href="#值类型变量" class="headerlink" title="值类型变量"></a>值类型变量</h1><h2 id="变量名：内存空间的首地址（指针）——-确定地址总线"><a href="#变量名：内存空间的首地址（指针）——-确定地址总线" class="headerlink" title="变量名：内存空间的首地址（指针）—— 确定地址总线"></a>变量名：内存空间的首地址（指针）—— 确定地址总线</h2><h2 id="变量值：数据-——-确定数据总线"><a href="#变量值：数据-——-确定数据总线" class="headerlink" title="变量值：数据 —— 确定数据总线"></a>变量值：数据 —— 确定数据总线</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值类型变量</span></span><br><span class="line"><span class="comment">// 变量名: 内存空间的首地址(指针)- 确定 地址总线</span></span><br><span class="line"><span class="comment">// 变量值: 数据 - 确定 数据总线</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/11/16/%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8/%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F.png" alt="值类型变量"></p><h1 id="引用类型变量"><a href="#引用类型变量" class="headerlink" title="引用类型变量"></a>引用类型变量</h1><h2 id="变量值：引用（内存空间的首地址）"><a href="#变量值：引用（内存空间的首地址）" class="headerlink" title="变量值：引用（内存空间的首地址）"></a>变量值：引用（内存空间的首地址）</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用类型变量</span></span><br><span class="line"><span class="comment">// 变量值: 引用(内存空间的首地址)</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125; <span class="comment">// new Object()</span></span><br><span class="line"><span class="keyword">const</span> obj1 = obj <span class="comment">// 引用传递</span></span><br><span class="line">obj.<span class="property">a</span> = <span class="string">&#x27;aaa&#x27;</span><span class="comment">//改变了堆内存中0x1111的值，并且obj和obj1都指向0x1111，所以obj1.a=&#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/11/16/%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8/%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F.png" alt="引用变量"></p><h1 id="对象加强"><a href="#对象加强" class="headerlink" title="对象加强"></a>对象加强</h1><h2 id="对象生成的过程"><a href="#对象生成的过程" class="headerlink" title="对象生成的过程"></a>对象生成的过程</h2><h3 id="1-js中对象都是由new运算生成的"><a href="#1-js中对象都是由new运算生成的" class="headerlink" title="1.js中对象都是由new运算生成的"></a>1.js中对象都是由new运算生成的</h3><h3 id="new的过程"><a href="#new的过程" class="headerlink" title="new的过程"></a>new的过程</h3><h3 id="1-在堆内存开辟一段空间"><a href="#1-在堆内存开辟一段空间" class="headerlink" title="1.在堆内存开辟一段空间"></a>1.在堆内存开辟一段空间</h3><h3 id="2-让this指向开辟的这个空间（this临时变量，保存了内存空间的首地址）"><a href="#2-让this指向开辟的这个空间（this临时变量，保存了内存空间的首地址）" class="headerlink" title="2.让this指向开辟的这个空间（this临时变量，保存了内存空间的首地址）"></a>2.让this指向开辟的这个空间（this临时变量，保存了内存空间的首地址）</h3><h3 id="3-执行构造函数"><a href="#3-执行构造函数" class="headerlink" title="3.执行构造函数"></a>3.执行构造函数</h3><h3 id="4-会将开辟的内存空间的首地址，作为表达式的结果返回"><a href="#4-会将开辟的内存空间的首地址，作为表达式的结果返回" class="headerlink" title="4.会将开辟的内存空间的首地址，作为表达式的结果返回"></a>4.会将开辟的内存空间的首地址，作为表达式的结果返回</h3><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. js中对象都是由 new 运算生成的</span></span><br><span class="line">      <span class="comment">// new 的过程</span></span><br><span class="line">      <span class="comment">// 1. 在堆内存开辟一段空间</span></span><br><span class="line">      <span class="comment">// 2. 让this指向开辟的这个空间(this临时变量, 保存了内存空间的首地址)</span></span><br><span class="line">      <span class="comment">// 3. 执行构造函数</span></span><br><span class="line">      <span class="comment">// 4. 会将开辟的内存空间的首地址, 作为表达式的结果返回</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">n, a</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = n</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = a</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;xiaoming&#x27;</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/11/16/%E5%80%BC%E5%92%8C%E5%BC%95%E7%94%A8/%E5%AF%B9%E8%B1%A1%E5%8A%A0%E5%BC%BA.png" alt="对象加强"></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步编程</title>
      <link href="/2023/11/06/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/11/06/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="异步的概念"><a href="#异步的概念" class="headerlink" title="异步的概念"></a>异步的概念</h2><p>同步按你的代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高</p><h2 id="什么时候用异步编程"><a href="#什么时候用异步编程" class="headerlink" title="什么时候用异步编程"></a>什么时候用异步编程</h2><p>主线程作为一个线程，不能够<strong>同时接受</strong>多方面的请求。所以，当一个事件没有结束时，界面将无法处理其他请求。</p><p>为了避免这种情况的发生，我们常常用子线程来完成一些可能消耗时间足够长以至于被用户察觉的事情，比如读取一个大文件或发出一个网络请求。因为子线程<strong>独立</strong>于主线程，所以即使出现阻塞也不会影响主线程的运行。</p><p>但是子线程有一个<strong>局限</strong>：一旦发射了以后就会与主线程失去同步，我们无法确定它的结束，如果结束之后需要处理一些事情，比如来自服务器的信息，我们是无法将它合并到主线程中去的。</p><p>为了<strong>解决</strong>这个问题,JavaScript中的异步操作函数往往通过回调函数来实现异步任务的结果处理。</p><p>[异步编程]: <a href="https://www.runoob.com/js/js-async.html">https://www.runoob.com/js/js-async.html</a>“参考–讲的很通俗”</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>div元素居中原理</title>
      <link href="/2023/10/28/div%E5%85%83%E7%B4%A0%E5%9C%A8%E6%95%B4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%B1%85%E4%B8%AD/"/>
      <url>/2023/10/28/div%E5%85%83%E7%B4%A0%E5%9C%A8%E6%95%B4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在页面设计中难免会碰到弹窗登录，最初的弹窗位置应该在页面中心，此时需要对登录界面的css进行设置</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 登录界面样式 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">512px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#ebebeb</span> solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 搭配position:fixed */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 此时窗口的左上角就是页面的中心点 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 所以需要窗口自己向左向上移动自身宽度的一半来使整体达到居中的位置 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* z-index登录界面具有最高的叠置顺序 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-bg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 充满整个界面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 让遮盖层铺满整个页面，离top的距离为0px */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-title&quot;</span>&gt;</span>登录</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;closeBtn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close-login&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遮盖层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**href&#x3D;”javascript:void(0)**a标签中的这行代码意义为a不跳转url，执行javascript的void(0)方法，即假链接：不跳转但是能点击</p><h3 id="结果图"><a href="#结果图" class="headerlink" title="结果图"></a>结果图</h3><p><img src="/2023/10/28/div%E5%85%83%E7%B4%A0%E5%9C%A8%E6%95%B4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%B1%85%E4%B8%AD/%E7%BB%93%E6%9E%9C.JPG" alt="结果"></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><h3 id="定位代码"><a href="#定位代码" class="headerlink" title="定位代码"></a>定位代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="comment">/* 将div固定在页面中 */</span></span><br></pre></td></tr></table></figure><p><img src="/2023/10/28/div%E5%85%83%E7%B4%A0%E5%9C%A8%E6%95%B4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%B1%85%E4%B8%AD/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86.JPG" alt="第一部分"></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/28/div%E5%85%83%E7%B4%A0%E5%9C%A8%E6%95%B4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%B1%85%E4%B8%AD/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86.JPG" alt="第二部分"></p><h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">         <span class="attribute">position</span>: fixed;</span><br><span class="line">         <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">         <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">         <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line"> <span class="comment">/*transform：translate为2D变换，</span></span><br><span class="line"><span class="comment">50%为自身宽度或高度的一半</span></span><br><span class="line"><span class="comment">‘-’为向左移动一半</span></span><br><span class="line"><span class="comment">即黄色中心点向左向上移动自身宽度的一半</span></span><br><span class="line"><span class="comment">此时黄色中心点便移动到蓝色中心位置*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相对定位VS绝对定位</title>
      <link href="/2023/10/26/css%E5%AE%9A%E4%BD%8D/"/>
      <url>/2023/10/26/css%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="绝对定位和相对定位的区别"><a href="#绝对定位和相对定位的区别" class="headerlink" title="绝对定位和相对定位的区别"></a>绝对定位和相对定位的区别</h1><p>​<strong>绝对定位</strong>使元素的位置与<strong>文档流无关</strong>，因此<strong>不占据空间</strong>。可以理解为绝对定位<strong>将元素从原来位置拿走</strong>，<strong>后面的元素就会占据绝对定位元素的位置</strong>。如同排队一样，前面的人走了，后面的人就会前进占去离开的人的位置。</p><p>​<strong>相对定位</strong>与绝对定位相反，它移动后原本所占的空间<strong>仍保留</strong>。可理解为它进行定位后，之前的位置后面的元素不可占据。如同私人车库停车一样，车子离开后，别的车不可以停在那个车库。</p><h1 id="绝对定位和相对定位的使用"><a href="#绝对定位和相对定位的使用" class="headerlink" title="绝对定位和相对定位的使用"></a>绝对定位和相对定位的使用</h1><p>​因为绝对定位会脱离文档流，而相对定位不会脱离文档流</p><p>​<strong>子绝父相</strong>：<strong>使用</strong>的时候，需要父级元素占据文档空间，否则子级元素会继续向上找父级元素（找position），所以父级元素必须使用相对定位，此时子级元素使用绝对定位即可在父级元素上进行偏移。</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.three</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>111</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/2023/10/26/css%E5%AE%9A%E4%BD%8D/%E5%AE%9A%E4%BD%8D.JPG" alt="定位"></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组遍历</title>
      <link href="/2023/10/25/%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86/"/>
      <url>/2023/10/25/%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数组遍历总结"><a href="#数组遍历总结" class="headerlink" title="数组遍历总结"></a>数组遍历总结</h1><h2 id="数组遍历4种方式"><a href="#数组遍历4种方式" class="headerlink" title="数组遍历4种方式"></a>数组遍历4种方式</h2><p>​1,普通for循环:速度最快,可读性最差<br>​2,forEach:速度较快,并且可以获取元素和索引,最常用的<br>​3,for…of:只能获取到元素,获取不到索引,可以通过元素获取索引<br>​4,for…in:只能获取到索引,获取不到元素,可以通过索引获取元素</p><h2 id="遍历对象常用方式"><a href="#遍历对象常用方式" class="headerlink" title="遍历对象常用方式"></a>遍历对象常用方式</h2><p>​<strong>for…of</strong> <strong>优势</strong>:可以使用解构的方式快速获取部分数据<br>​<strong>for…in</strong> 可以很方便获取<strong>对象的属性名</strong>(后期可以通过属性名获取属性值)</p><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><p>​优先使用forEach,需要能看懂for…of和for…in</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-let的暂时性死区及const对比</title>
      <link href="/2023/10/24/ES6-%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA/"/>
      <url>/2023/10/24/ES6-%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​<strong>ES6</strong> 明确规定，代码块内如果存在 <strong>let 或者 const</strong>，</p><p>​        代码块会对这些命令声明的变量从块的开始就形成一个封闭作用域。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">PI</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>); <span class="comment">// 报错：Cannot access &#x27;PI&#x27; before initialization</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable constant_">PI</span> = <span class="string">&quot;3.1415926&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p>代码块内，在声明变量 PI 之前使用它会报错。</p><h2 id="const和let对比"><a href="#const和let对比" class="headerlink" title="const和let对比"></a>const和let对比</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ol><li>const也有块级作用域</li><li>在同一个域中不能重复声明</li><li>没有变量提升</li></ol><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p>与let相比const 声明一个只读的常量，一旦声明，常量的值就不能改变</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>​顺序：const &gt; let &gt; var</p><p>​const一般用于对象类型，let一般用于基本数据类型</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解构赋值</title>
      <link href="/2023/10/24/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
      <url>/2023/10/24/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​解构赋值是对赋值运算符的扩展。</p><p>​他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</p><p>​在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>​数组模式匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [ 变量列表 ] = 数组</span><br></pre></td></tr></table></figure><p>​对象模式匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>&#123;变量列表&#125; = 对象</span><br></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>​数组模式匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">       <span class="comment">// a = 1</span></span><br><span class="line">       <span class="comment">// b = 2</span></span><br><span class="line">       <span class="comment">// c = 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//方法:将后面数组复制一份,用变量替换里面的值</span></span><br><span class="line">       <span class="keyword">const</span> [num1, [[num2], num3]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(num1)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(num2)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(num3)</span><br></pre></td></tr></table></figure><p>​对象模式匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line">        <span class="keyword">const</span> stu = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">            <span class="comment">//ES5中方法的写法</span></span><br><span class="line">            <span class="attr">study</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;学习&#x27;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//E56中方法可以这么写</span></span><br><span class="line">            <span class="title function_">exam</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;考试&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解构</span></span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">name</span>: username, age, study, exam &#125; = stu</span><br><span class="line"></span><br><span class="line">        <span class="comment">//console.log(name)</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username) <span class="comment">//起别名,防止跟下面的变量name冲突</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(study)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(exam)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">&#x27;qqq&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解构后可以直接调用</span></span><br><span class="line">        <span class="title function_">exam</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js的阻塞机制</title>
      <link href="/2023/10/16/js%E7%9A%84%E9%98%BB%E5%A1%9E%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/10/16/js%E7%9A%84%E9%98%BB%E5%A1%9E%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="阻塞机制"><a href="#阻塞机制" class="headerlink" title="阻塞机制"></a>阻塞机制</h1><p>js阻塞机制，跟js引擎的单线程处理方式有关，每个window一个js线程。所谓单线程，即在某个特定的时刻只有特定的代码能够被执行，并阻塞其它的代码</p><h1 id="重点重点！"><a href="#重点重点！" class="headerlink" title="重点重点！"></a>重点重点！</h1><p>[js阻塞机制]: <a href="https://blog.csdn.net/C_B_W_/article/details/116173486">https://blog.csdn.net/C_B_W_/article/details/116173486</a>“原文出处”</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2023/10/15/%E9%97%AD%E5%8C%85/"/>
      <url>/2023/10/15/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="1、变量作用域"><a href="#1、变量作用域" class="headerlink" title="1、变量作用域"></a>1、变量作用域</h1><p>要理解闭包，首先要理解JavaScript的特殊的变量作用域。</p><p>变量的作用域无非就两种：全局变量和局部变量。</p><p>JavaScript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。</p><p><strong>注意点:<strong>在函数内部声明变量的时候，一定要使用</strong>var命令</strong>。如果不用的话，你实际上声明的是一个全局变量！</p><h2 id="2、如何从外部读取函数内部的局部变量？"><a href="#2、如何从外部读取函数内部的局部变量？" class="headerlink" title="2、如何从外部读取函数内部的局部变量？"></a>2、如何从外部读取函数内部的局部变量？</h2><p>出于种种原因，我们有时候需要获取到函数内部的局部变量。但是上面已经说过了，正常情况下，这是办不到的！只有通过以下方式才能实现：</p><p><em><strong>在函数内部，再定义一个函数</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(n); <span class="comment">// 999</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，函数 f2 就被包括在函数 f1 内部，这时 f1 内部的所有局部变量，对 f2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 f1 就是不可见的。</p><p>这就是 JavasSript 语言特有的”链式作用域”结构（chain scope），</p><p>子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p><strong>既然 f2 可以读取 f1 中的局部变量，那么只要把 f2 作为返回值，我们不就可以在 f1 外部读取它的内部变量了吗！</strong></p><h1 id="3、闭包的概念"><a href="#3、闭包的概念" class="headerlink" title="3、闭包的概念"></a>3、闭包的概念</h1><p>上面代码中的 f2 函数，就是闭包</p><p><strong>闭包就是能够读取其他函数内部变量的函数</strong></p><p>由于在 JavaScript 中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成”定义在一个函数内部的函数”。</p><p><strong>所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*需求</span></span><br><span class="line"><span class="comment">                在f1函数的外部,访问f1里面的局部变量num1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            做法</span></span><br><span class="line"><span class="comment">                将f1里面的定义的f2返回出去,在外面接收并调用</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(num1)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//f2()</span></span><br><span class="line">            <span class="keyword">return</span> f2 <span class="comment">//第一步:将f2返回出去</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二步:在外面接收返回来的函数</span></span><br><span class="line">        <span class="keyword">var</span> f = <span class="title function_">f1</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三步:调用f函数</span></span><br><span class="line">        <span class="title function_">f</span>()<span class="comment">//通过断点,可以看到函数内部也形成了一个闭包(f1函数),并且f1函数调用完成之后,num1还在内存中(f2这个函数在访问着num1,变相的延长了num1的生命周期)</span></span><br></pre></td></tr></table></figure><p>[闭包]: <a href="https://www.runoob.com/w3cnote/closure-intro.html">https://www.runoob.com/w3cnote/closure-intro.html</a>“原文出处”</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>实现了函数外面读取函数内部的局部变量</li><li>变相的延长了局部变量的生命周期，变量所在的函数调用完成之后，话可以继续存在</li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数调用及this指向总结</title>
      <link href="/2023/10/13/%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
      <url>/2023/10/13/%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th>函数类型</th><th>this指向总结</th><th>调用方式总结</th></tr></thead><tbody><tr><td>命名函数</td><td>window</td><td>函数名</td></tr><tr><td>匿名函数</td><td>window</td><td>变量名</td></tr><tr><td>构造函数</td><td>创建的那个对象</td><td>new</td></tr><tr><td>字面量对象中定义的方法</td><td>调用方法的那个对象</td><td>字面量对象</td></tr><tr><td>事件处理函数</td><td>事件源对象</td><td>事件触发的时候会自动调用</td></tr><tr><td>定时器里面的函数</td><td>window</td><td>设置的时间到了会自动调用</td></tr><tr><td>立即执行函数</td><td>window</td><td>定义完后立即调用</td></tr></tbody></table><ol><li><h2 id="命名函数"><a href="#命名函数" class="headerlink" title="命名函数"></a>命名函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;命名函数:&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">f1</span>()</span><br></pre></td></tr></table></figure></li><li><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;匿名函数:&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">f2</span>()</span><br></pre></td></tr></table></figure></li><li><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;构造函数:&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stu)</span><br></pre></td></tr></table></figure></li><li><h2 id="字面量对象中定义的方法"><a href="#字面量对象中定义的方法" class="headerlink" title="字面量对象中定义的方法"></a>字面量对象中定义的方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">study</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;字面量对象:&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.<span class="title function_">study</span>()</span><br></pre></td></tr></table></figure></li><li><h2 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;事件处理函数:&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><h2 id="定时器里面的函数"><a href="#定时器里面的函数" class="headerlink" title="定时器里面的函数"></a>定时器里面的函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定时器中的函数:&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>); <span class="comment">//必须要加上分号,否则会影响下面的立即执行函数</span></span><br></pre></td></tr></table></figure></li><li><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;立即执行函数:&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">      &#125;)()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型对象vs对象的原型</title>
      <link href="/2023/10/12/%E5%8E%9F%E5%9E%8B/"/>
      <url>/2023/10/12/%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="原型的由来"><a href="#原型的由来" class="headerlink" title="原型的由来"></a>原型的由来</h1><h2 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h2><p>​之前使用this定义的方法，每new一次，都会为对象的方法开辟一块内存，浪费内存。</p><h2 id="原型的本质"><a href="#原型的本质" class="headerlink" title="原型的本质"></a>原型的本质</h2><p>​ 就是构造函数里面的一个属性prototype，可以看做是类的静态成员，可以把公共的方法定义在上面。</p><h2 id="原型的好处"><a href="#原型的好处" class="headerlink" title="原型的好处"></a>原型的好处</h2><p>​将方法定义在原型上面，每次创建对象就不需要为对象的方法重新分配空间，节省了内存</p><h1 id="原型对象prototype"><a href="#原型对象prototype" class="headerlink" title="原型对象prototype"></a>原型对象prototype</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​是一个对象,每一个构造函数里面都有一个prototype属性,指向这个对象本身<br>prototype一般称之为原型对象</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>​可以把那些不变的方法,直接定义到原型对象(prototype),所有对象的实例,都可以共享这个方法</p><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><p>​在构造函数上(也可以认为在类上),通过打印构造函数可以看到</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将公共的方法定义在原型对象上面</span></span><br><span class="line">       <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;会唱歌&#x27;</span>)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//它打印出来的是object对象类型,一般将类的prototype称为原型对象</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">//object</span></span><br><span class="line"><span class="comment">//创建两个明星对象</span></span><br><span class="line">       <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">60</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">name</span>)</span><br><span class="line">       ldh.<span class="title function_">sing</span>()</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>,<span class="number">60</span>)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(zxy)</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(zxy.<span class="property">name</span>)</span><br><span class="line">       zxy.<span class="title function_">sing</span>()</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//原型对象的作用:避免在创建对象的时候为对象的方法重复开辟空间</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sing</span> === zxy.<span class="property">sing</span>)<span class="comment">//true 说明是同一个地址,没有浪费内存</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Array</span>)<span class="comment">//可以看到Array类中的方法几乎都是定义在原型对象中</span></span><br></pre></td></tr></table></figure><h1 id="对象的原型proto"><a href="#对象的原型proto" class="headerlink" title="对象的原型proto"></a>对象的原型proto</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>​每一个对象都有一个属性_<em>proto</em>_,指向构造函数的原型对象（prototype）</p><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>​为对象查找方法提供了一个机制(先从构造函数中找，如果找不到，再去它指向的原型对象中找)</p><h2 id="位置-1"><a href="#位置-1" class="headerlink" title="位置"></a>位置</h2><p>​在对象上，通过打印对象就可以看到</p><h1 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将公共的方法定义在原型对象上面</span></span><br><span class="line">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;会唱歌&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建两个明星对象</span></span><br><span class="line">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">60</span>)</span><br><span class="line">        <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>,<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原型对象(在构造函数上),本质是类的一个静态成员(类的一个属性)</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Star</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象的原型(在对象上),本质是对象的一个属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(ldh)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(ldh.<span class="property">__proto__</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象的原型指向原型对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span>  === <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">            对象的原型应用场景</span></span><br><span class="line"><span class="comment">                为对象查找方法提供了一个机制(先从构造函数中找,如果找不到,在通过对象的原型找到原型对象,在原型对象中找)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       ldh.<span class="title function_">sing</span>()</span><br></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>原型对象<strong>在构造函数上</strong>，本质是一个<strong>类</strong>的<strong>静态成员</strong>（类的一个属性）</p><p>对象的原型<strong>在对象上</strong>，本质是<strong>对象</strong>的一个属性</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态表格案例2----模板字符串的应用！</title>
      <link href="/2023/10/09/%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC%E6%A1%88%E4%BE%8B(2)/"/>
      <url>/2023/10/09/%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC%E6%A1%88%E4%BE%8B(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="与案例1的不同–模板字符串"><a href="#与案例1的不同–模板字符串" class="headerlink" title="与案例1的不同–模板字符串"></a>与案例1的不同–模板字符串</h1><h2 id="js部分代码"><a href="#js部分代码" class="headerlink" title="js部分代码"></a>js部分代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//牛逼！！！！！节点的innerHTML包含标签！！！！！</span></span><br><span class="line">        <span class="comment">// 所以用table.innerHTML以及模板字符串</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#add&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 获取name和age节点</span></span><br><span class="line">            <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#name&#x27;</span>).<span class="property">value</span></span><br><span class="line">            <span class="keyword">var</span> age = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#age&#x27;</span>).<span class="property">value</span></span><br><span class="line">            <span class="comment">// 获取table节点</span></span><br><span class="line">            <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#tb&#x27;</span>)</span><br><span class="line">            <span class="comment">// 重点！！！重点！</span></span><br><span class="line">            <span class="comment">//直接填充一行数据</span></span><br><span class="line">            table.<span class="property">innerHTML</span> += <span class="string">`&lt;tr&gt;</span></span><br><span class="line"><span class="string">                                    &lt;td&gt;<span class="subst">$&#123;name&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                                    &lt;td&gt;<span class="subst">$&#123;age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                                    &lt;td&gt;&lt;a href=&quot;JavaScript:void(0);&quot; onclick=&quot;drop(this)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                                &lt;/tr&gt;`</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//删除部分相同</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tr = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span></span><br><span class="line">            <span class="keyword">var</span> table = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span></span><br><span class="line">            table.<span class="title function_">removeChild</span>(tr)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="重点思路"><a href="#重点思路" class="headerlink" title="重点思路"></a>重点思路</h1><h3 id="利用innerHTML包含元素标签的特性，并且所有的表格都包含在table内，所以改变table-innerHTML即可："><a href="#利用innerHTML包含元素标签的特性，并且所有的表格都包含在table内，所以改变table-innerHTML即可：" class="headerlink" title="利用innerHTML包含元素标签的特性，并且所有的表格都包含在table内，所以改变table.innerHTML即可："></a>利用innerHTML包含元素标签的特性，并且所有的表格都包含在table内，所以改变table.innerHTML即可：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">table.<span class="property">innerHTML</span> += <span class="string">`&lt;tr&gt;</span></span><br><span class="line"><span class="string">                                    &lt;td&gt;<span class="subst">$&#123;name&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                                    &lt;td&gt;<span class="subst">$&#123;age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                                    &lt;td&gt;&lt;a href=&quot;JavaScript:void(0);&quot; onclick=&quot;drop(this)&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                                &lt;/tr&gt;`</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态表格案例1----标准的DOM实现</title>
      <link href="/2023/10/09/%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC%E6%A1%88%E4%BE%8B(1)/"/>
      <url>/2023/10/09/%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC%E6%A1%88%E4%BE%8B(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>动态的表格进行增删改操作</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>使用标准的DOM实现</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>获取按钮,添加点击事件</li><li>创建行,单元格,将单元格添加到行里面</li><li>获取文本框中的数据,填充到单元格中</li><li>将行添加到表格中</li></ol><p>​                  </p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>动态表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入年龄&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;tb&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;drop(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;drop(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第一步：先获取姓名,年龄和按钮的节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#name&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> age = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#age&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> add = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        add.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建单元格</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> nameTd = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> ageTd = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> deleteTd = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将td添加到行中</span></span></span><br><span class="line"><span class="language-javascript">            tr.<span class="title function_">appendChild</span>(nameTd)</span></span><br><span class="line"><span class="language-javascript">            tr.<span class="title function_">appendChild</span>(ageTd)</span></span><br><span class="line"><span class="language-javascript">            tr.<span class="title function_">appendChild</span>(deleteTd)</span></span><br><span class="line"><span class="language-javascript">            nameTd.<span class="property">innerHTML</span> = name.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            ageTd.<span class="property">innerHTML</span> = age.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建删除的a标签,设置属性,添加Td</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            a.<span class="property">innerHTML</span> = <span class="string">&#x27;删除&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            a.<span class="property">href</span> = <span class="string">&#x27;JavaScript:void(0);&#x27;</span><span class="comment">//可以确保点击a标签的时候,不会跳转,而是删除,可以保留超链接的样式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 元素自定义属性,onclick是自定义的，定义drop方法</span></span></span><br><span class="line"><span class="language-javascript">            a.<span class="title function_">setAttribute</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="string">&#x27;drop(this)&#x27;</span>)<span class="comment">//这里的this指代a对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将a标签添加到td中</span></span></span><br><span class="line"><span class="language-javascript">            deleteTd.<span class="title function_">appendChild</span>(a)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将行添加到表格中</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#tb&#x27;</span>).<span class="title function_">appendChild</span>(tr)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//删除方法:a标签调用这个方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 删除这个table中的tr</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 通过a标签找到所在的行a-td-tr</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> tr = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 再找到这个table(a-td-tr-table)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> table = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 删除</span></span></span><br><span class="line"><span class="language-javascript">            table.<span class="title function_">removeChild</span>(tr)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;drop(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绑定属性onclick(自定义)的drop方法，this指代绑定的节点—-即a节点</p><h3 id="删除也需要定位（删除整行）"><a href="#删除也需要定位（删除整行）" class="headerlink" title="删除也需要定位（删除整行）"></a>删除也需要定位（删除整行）</h3><ol><li>先定位哪一表格</li><li>再定位哪一行</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除方法:a标签调用这个方法</span></span><br><span class="line">        <span class="comment">// 删除这个table中的tr</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">            <span class="comment">// 通过a标签找到所在的行a-td-tr</span></span><br><span class="line">            <span class="comment">//obj.parentNode是obj节点的父节点</span></span><br><span class="line">            <span class="keyword">var</span> tr = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span></span><br><span class="line">            <span class="comment">// 再找到这个table(a-td-tr-table)</span></span><br><span class="line">            <span class="keyword">var</span> table = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span></span><br><span class="line">            <span class="comment">// 删除</span></span><br><span class="line">            table.<span class="title function_">removeChild</span>(tr)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>return的用法</title>
      <link href="/2023/10/05/return%E7%94%A8%E6%B3%95/"/>
      <url>/2023/10/05/return%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> textarea = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">    <span class="comment">// 添加事件</span></span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//查看textarea的value值：利用console.dir(textarea)查找textarea的哪个属性中包含有输入的内容</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取textarea的内容 </span></span><br><span class="line">      <span class="keyword">var</span> value = textarea.<span class="property">value</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断输入内容不能为空</span></span><br><span class="line">      <span class="keyword">if</span> (value == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;输入的内容不能为空&#x27;</span>)</span><br><span class="line">        <span class="comment">//  return 语句用于提前结束按钮点击事件处理程序（即btn.onclick函数）</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建li元素</span></span><br><span class="line">      <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">      <span class="comment">// 将内容填充进去</span></span><br><span class="line">      li.<span class="property">innerHTML</span> = value</span><br><span class="line">      <span class="comment">// 将li元素添加到ul下面</span></span><br><span class="line">      <span class="comment">// ul.children[0]是ul中子元素的第一个</span></span><br><span class="line">      ul.<span class="title function_">insertBefore</span>(li, ul.<span class="property">children</span>[<span class="number">0</span>])</span><br><span class="line">      <span class="comment">// 添加完成之后，清空文本域的内容</span></span><br><span class="line">      textarea.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><p><code>return</code> 语句用于提前结束按钮点击事件处理程序（即<code>btn.onclick</code>函数)</p><h2 id="具体来说"><a href="#具体来说" class="headerlink" title="具体来说"></a>具体来说</h2><p>​如果文本域（<code>textarea</code>）的值为空（<code>value == &#39;&#39;</code>），则会显示一个警告弹窗，然后使用 <code>return</code> 语句来提前结束函数的执行。这意味着如果用户没有输入任何内容，函数会在此处停止执行，不会执行后续的代码。这是为了避免添加空的列表项到 <code>ul</code> 元素中</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则对象</title>
      <link href="/2023/09/26/%E6%AD%A3%E5%88%99%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/09/26/%E6%AD%A3%E5%88%99%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="正则对象"><a href="#正则对象" class="headerlink" title="正则对象"></a>正则对象</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​正则表达式是描述字符模式的对象。<br>​正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p><p>写一个正则校验手机号  ^1[35789][0-9]{9}$  或者 ^1[35789]\d{9}$<br>    1,第一位以1开头<br>    2,第二位一般是3,5,7,8,9<br>    3,总共有11位<br>    4,全部都是数字</p><p>写一个正则校验qq号  ^[1-9][0-9]{4,14}$  或者 ^[1-9]\d{4,14}$<br>    1,必须是5-15位<br>    2,第一位不能是0<br>    3,全部都是数字</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>单字符 代表它自己<br>    []方括号 用于查找某个范围内的字符<br>    [12345] 表示1-5中的任意一个:像这种连续也可以写成[1-5]<br>    [0-9] 表示0-9中的任意一个<br>    [ ^0-9 ] 表示非数字(对[0-9]的取反)<br>    [a-zA-Z]表示英文字符<br>    [ ^a-zA-Z ]表示非英文字符</p><p>数量词:表示前面字符出现的次数<br>    [0-9]+  +表示至少出现一次<br>    [0-9]*  *表示出现任意次(0次,1次,多次)<br>    [0-9]?  ?表示出现0次或者1次<br>    [0-9]{x} {x}表示出现x次<br>    [0-9]{x,} {x,}表示至少出现x次<br>    [0-9]{x,y} {x,y}表示至少出现x次,至多出现y次</p><p>元字符:是拥有特殊含义的字符,类似于关键字<br>    \d:表示0-9的数字 和[0-9]的含义是一样的<br>    \D:表示非数字 和 [^0-9]的含义是一样的<br>    \w:表示单词字符 和 [a-zA-Z0-9_]的含义是一样的<br>    \W:表示非单词字符 和 [^a-zA-Z0-9_]的含义是一样的</p><p>n$匹配任何结尾为 n 的字符串。<br>^n匹配任何开头为 n 的字符串。</p><p>^和$一般是组合使用<br>    写法:^正则内容$<br>    作用:这种写法称为正则的严格模式,表示要检测的字符必须是正则指定的内容,不能多也不能少</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数及数组(js)</title>
      <link href="/2023/09/25/javascript%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/25/javascript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>（1）函数本质是通过 Function类 new 出来的对象</p><h1 id="array对象"><a href="#array对象" class="headerlink" title="array对象"></a>array对象</h1><h2 id="数组元素的增加"><a href="#数组元素的增加" class="headerlink" title="数组元素的增加"></a>数组元素的增加</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组元素的增加:push方法</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> len = arr.<span class="title function_">push</span>(<span class="number">6</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//输出结果:[1,2,3,4,5,6]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(len)<span class="comment">//输出结果:6，len的输出结果是元素不是数组！！！</span></span><br></pre></td></tr></table></figure><h2 id="数组元素的删除"><a href="#数组元素的删除" class="headerlink" title="数组元素的删除"></a>数组元素的删除</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组元素的删除</span></span><br><span class="line"><span class="comment">//pop方法：</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">obj = arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//注意方法的返回值为从数组末尾移除的元素，数组长度已经改变</span></span><br><span class="line"><span class="comment">//delete方法</span></span><br><span class="line"><span class="keyword">delete</span> arr[index]</span><br><span class="line"><span class="comment">//数组长度未改变，数组指定位置的元素变为undefined</span></span><br></pre></td></tr></table></figure><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>遍历数组,找出数组元素中索引只有一个的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历数组,找出数组元素中索引只有一个的元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>]</span><br><span class="line"><span class="keyword">var</span> res =  arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) == index   <span class="comment">//数组元素第一次出现的索引 等于 遍历时候的索引</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">//即第一个20：indexof(item)=1==1,但是第二个20：indexof(item)=1！==2，所以过滤掉了第二个20</span></span><br><span class="line"><span class="comment">//打印过滤后的数组[10,20,30]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>​定义新的数组,拿到原数组的每一个元素,在放入新数组之前做一个判断(如果新数组中没有这个元素就可以放进去)</p><p>​        怎么判断新数组中没有这个元素  调用indexOf方法,值是-1就表示不存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>]</span><br><span class="line"><span class="comment">//新数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = []</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(newArr.<span class="title function_">indexOf</span>(item) == -<span class="number">1</span>)&#123;</span><br><span class="line">                newArr.<span class="title function_">push</span>(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">//打印新数组[10,20,30]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通道数理解</title>
      <link href="/2023/09/19/%E9%80%9A%E9%81%93%E6%95%B0%E7%90%86%E8%A7%A3/"/>
      <url>/2023/09/19/%E9%80%9A%E9%81%93%E6%95%B0%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-通道数"><a href="#1-通道数" class="headerlink" title="1 通道数"></a>1 通道数</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p>可以理解为图像的深度，例如我们常用的RGB图像，它就包含3个通道(R,G,B三个通道合成得到图像)，而灰度图像就只有1个通道。</p><h2 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h2><p><img src="/2023/09/19/%E9%80%9A%E9%81%93%E6%95%B0%E7%90%86%E8%A7%A3/%E9%80%9A%E9%81%93%E6%95%B0.png"></p><h2 id="1-2-输入通道数等于卷积核通道个数"><a href="#1-2-输入通道数等于卷积核通道个数" class="headerlink" title="1.2 输入通道数等于卷积核通道个数"></a>1.2 输入通道数等于卷积核通道个数</h2><p>​例如当我们输入的图片为三通道时，那么卷积核也会有三个通道，就像上述图片，最左边的三个矩阵是一个图片的三个通道（因为计算机上是以数字矩阵存储），与这张图片相乘的是一个1*1的三通道卷积核（褐色、橘色、紫色的矩阵分别构成3通道）</p><p>​为了让图像的三个通道和卷积核分别进行点积并相加得到一个矩阵，即一个特征图，所以卷积核的通道也要有3个，为了和图像的每个通道都进行运算。</p><h2 id="1-3-卷积核个数等于输出通道个数"><a href="#1-3-卷积核个数等于输出通道个数" class="headerlink" title="1.3 卷积核个数等于输出通道个数"></a>1.3 卷积核个数等于输出通道个数</h2><p>​卷积核的数量决定输出的通道数，比如说现在有一张像素为16 * 16的三通道图片（16 * 16 * 3），其实这张照片就由三个16 * 16的矩阵组成，如果这时我们有256个3 * 3 * 3的卷积核，其实就是每个卷积核由3个3 * 3的矩阵，有256个这样的卷积核。那么这张16 * 16 * 3的图片要和256个 3 * 3 * 3 的卷积核都进行点积并相加得出特征图，即得到的特征图有256个，即卷积核的个数，也是输出通道的个数。</p><h2 id="1-4-为什么要增加通道"><a href="#1-4-为什么要增加通道" class="headerlink" title="1.4 为什么要增加通道"></a>1.4 为什么要增加通道</h2><p>​在一张照片中可能有很多信息，比如人，动物….，我们人眼可以一下子就分辨出来，但是计算机不可以，他要进行特征提取，也是卷积的第一个操作。</p><p>​我们增加通道数就代表着增加特征，而造成通道数增加的操作其实就是卷积核的增加，不同的卷积核可以提取到不同特征。</p><p>​因为不同的卷积核可以分辨出不同的特征，所以增加卷积核的个数很必要，计算机通过利用这些特征图，来最终得到结论，分辨出图像的事物到底是什么。</p><p>[通道]: <a href="https://blog.csdn.net/qq_54641516/article/details/127079382">https://blog.csdn.net/qq_54641516/article/details/127079382</a>“原文出处”</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flex和浮动对比</title>
      <link href="/2023/09/12/flex%E5%92%8C%E6%B5%AE%E5%8A%A8/"/>
      <url>/2023/09/12/flex%E5%92%8C%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-主要用途"><a href="#1-主要用途" class="headerlink" title="1 主要用途"></a>1 主要用途</h2><h3 id="1-1-浮动布局"><a href="#1-1-浮动布局" class="headerlink" title="1.1 浮动布局"></a>1.1 浮动布局</h3><ol><li>创建多列布局：通过将元素浮动到左或右，可以实现多列布局</li><li>实现文本环绕效果：使文本围绕在浮动元素周围，如图片</li></ol><h3 id="1-2-flex布局"><a href="#1-2-flex布局" class="headerlink" title="1.2 flex布局"></a>1.2 flex布局</h3><ol><li>简化布局：Flex布局使得创建水平和垂直方向上的布局都变得非常容易，而不需要使用复杂的浮动或定位。</li><li>响应式设计：Flex布局非常适合响应式设计，可以轻松调整布局以适应不同的屏幕尺寸和设备。</li><li>等高列布局：Flexbox允许您创建等高列，即使它们的内容高度不同。</li><li>分布空间：Flex容器可以智能地分配空间，以使其中的项目在不同屏幕尺寸下保持适当的布局。</li></ol><h2 id="2-浮动布局的弊端"><a href="#2-浮动布局的弊端" class="headerlink" title="2 浮动布局的弊端"></a>2 浮动布局的弊端</h2><p>子元素都浮动之后，会脱离文档流，导致父元素没有高度(<strong>理解：看不到父类元素的背景</strong>)，从而对后面的布局产生影响</p><h2 id="3-示例代码"><a href="#3-示例代码" class="headerlink" title="3 示例代码"></a>3 示例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* father不设置高度将由子元素撑开 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>image-label生成</title>
      <link href="/2023/09/11/image-label%E7%94%9F%E6%88%90/"/>
      <url>/2023/09/11/image-label%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>目的是为每个蜜蜂图像创建一个相应的标签文件</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">root_dir = <span class="string">&#x27;E:\pythonProject\hymenoptera_data/train&#x27;</span></span><br><span class="line">target_dir = <span class="string">&#x27;bees_image&#x27;</span></span><br><span class="line"><span class="comment"># 涉及到listdir时用绝对路径</span></span><br><span class="line">img_path = os.listdir(os.path.join(root_dir, target_dir))</span><br><span class="line">label = target_dir.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">out_dir = <span class="string">&#x27;bees_label&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> img_path:</span><br><span class="line">    file_name = i.split(<span class="string">&#x27;.jpg&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(root_dir, out_dir,<span class="string">&quot;&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(file_name)),<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(label)</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.listdir()使用时根目录需要用绝对路径</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>open-cv显示图像</title>
      <link href="/2023/09/11/opencv/"/>
      <url>/2023/09/11/opencv/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么cv2-imshow之后要跟cv2-waitkey"><a href="#为什么cv2-imshow之后要跟cv2-waitkey" class="headerlink" title="为什么cv2.imshow之后要跟cv2.waitkey"></a>为什么cv2.imshow之后要跟cv2.waitkey</h2><p>waitkey控制着imshow的持续时间，当imshow之后不跟waitkey时，相当于没有给imshow提供时间展示图像，所以只有一个空窗口一闪而过。添加了waitkey后，哪怕仅仅是cv2.waitkey(1),我们也能截取到一帧的图像,所以cv2.imshow后边是必须要跟cv2.waitkey</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cv.imshow(<span class="string">&#x27;image&#x27;</span>,img)</span><br><span class="line">&lt;!-- 第一个参数为图片显示框的标题，第二个参数为要显示的图片变量 --&gt;</span><br><span class="line">cv.waitKey(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>conda</title>
      <link href="/2023/09/07/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/09/07/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="查看conda的环境信息"><a href="#查看conda的环境信息" class="headerlink" title="查看conda的环境信息"></a>查看conda的环境信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>消融实验</title>
      <link href="/2023/09/04/%E6%B6%88%E8%9E%8D%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/09/04/%E6%B6%88%E8%9E%8D%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-消融实验-简介"><a href="#1-消融实验-简介" class="headerlink" title="1 消融实验 简介"></a>1 消融实验 简介</h2><ul><li>定义</li><li>目的</li><li>举例</li><li>意义</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>“消融实验”（ablation experiment）是一种常用的实验方法，用于评估深度神经网络中不同组件或部分的贡献，以了解它们对模型性能的影响。这种实验方法通常通过逐步移除或禁用神经网络的某些部分来进行，然后观察模型性能的变化。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>是帮助研究人员理解神经网络模型的工作方式，识别哪些部分对模型性能起到关键作用，以及哪些部分可能不是必需的或可以改进。通过这种方式，研究人员可以更好地优化和改进深度学习模型，提高其性能和效率。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>假设你有一个用于图像分类的卷积神经网络（CNN），你可以进行消融实验来逐步去除其中的某些卷积层或池化层，然后测试模型在分类任务上的性能。通过比较不同实验条件下的性能，你可以确定哪些层对于任务的成功至关重要，哪些可以被简化或去除，从而减少模型的复杂性</p><h3 id><a href="#" class="headerlink" title></a></h3><p>消融实验在深度学习中是一种有用的工具，有助于深入了解神经网络的工作原理，指导模型设计和改进，以及更好地理解模型的内部机制。它有助于研究人员更有效地构建和优化深度学习模型</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2023/08/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2023/08/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/21/hello-world/"/>
      <url>/2023/08/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
